<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ops on Tux-Sudo</title>
    <link>https://blog.tux-sudo.com/categories/ops/</link>
    <description>Recent content in Ops on Tux-Sudo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 19 Mar 2018 11:52:57 +0530</lastBuildDate>
    
	<atom:link href="https://blog.tux-sudo.com/categories/ops/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>ARM Your Golang Containers</title>
      <link>https://blog.tux-sudo.com/posts/armyourcontainers/</link>
      <pubDate>Mon, 19 Mar 2018 11:52:57 +0530</pubDate>
      
      <guid>https://blog.tux-sudo.com/posts/armyourcontainers/</guid>
      <description>So then, here is the deal. I write tiny microservices that may or may not serve any purpose. Despite how meaningless they might be, I give them the perfect operations treatment.
Here is an example of such a service: hash-svc. At it&amp;rsquo;s core, all it does is take a string and returns it hash.
tchaudhr:cmd/ (master✗) $ ./hash-svc -serverAddr :12000 {&amp;quot;addr&amp;quot;:&amp;quot;:12000&amp;quot;,&amp;quot;msg&amp;quot;:&amp;quot;Started HTTP Server&amp;quot;} {&amp;quot;err&amp;quot;:null,&amp;quot;input&amp;quot;:&amp;quot;123&amp;quot;,&amp;quot;method&amp;quot;:&amp;quot;hashsha256&amp;quot;,&amp;quot;output&amp;quot;:&amp;quot;a665a45920422f9d417e4867efdc4fb8a04a1f3fff1fa07e998e86f7f7a27ae3&amp;quot;,&amp;quot;took&amp;quot;:&amp;quot;41.472µs&amp;quot;} tchaudhr:~/ $ curl http://localhost:12000/hash\?s\=123 {&amp;quot;v&amp;quot;:&amp;quot;a665a45920422f9d417e4867efdc4fb8a04a1f3fff1fa07e998e86f7f7a27ae3&amp;quot;}  Now, to please my heart, I put this in a container, added a Makefile, hooked up my CI and started pushing out containers with every commit.</description>
    </item>
    
    <item>
      <title>Caddy! Team 443 FTW</title>
      <link>https://blog.tux-sudo.com/posts/caddy-autohttps/</link>
      <pubDate>Mon, 19 Feb 2018 11:01:54 +0530</pubDate>
      
      <guid>https://blog.tux-sudo.com/posts/caddy-autohttps/</guid>
      <description>This one is a gamechanger. It really is.
On a recent Golang obsessed Github browsing spree, I read the following project description: &amp;ldquo;Fast, cross-platform HTTP/2 web server with automatic HTTPS&amp;rdquo;. I&amp;rsquo;ve read that before, and more often than not ended up disappointing myself and resorting to hacks like this to create an automatic TLS system for my websites. There are other ways, but almost all of them were semi-automatic in the long run (yay cron!</description>
    </item>
    
    <item>
      <title>LetsEncrypt Certificates for Dockerized Nginx</title>
      <link>https://blog.tux-sudo.com/posts/letsencrypt-nginx-docker/</link>
      <pubDate>Tue, 26 Sep 2017 16:25:49 +0530</pubDate>
      
      <guid>https://blog.tux-sudo.com/posts/letsencrypt-nginx-docker/</guid>
      <description>I like nginx. I like docker. I like SSL. I also like not paying for SSL certificates.
If you, like me are operating a small time website, you probably don&amp;rsquo;t want to dish out a few hundred dollars for an SSL certificate.Thankfully, LetsEncrypt provides free ssl certificates and is now trusted by most major browsers.
However, integrating certbot to automatically configure my nginx inside a docker container has been a pain.</description>
    </item>
    
  </channel>
</rss>