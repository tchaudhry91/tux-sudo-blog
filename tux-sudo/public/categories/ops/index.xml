<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ops on Tux-Sudo</title>
    <link>https://blog.tux-sudo.com/categories/ops/</link>
    <description>Recent content in Ops on Tux-Sudo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 05 May 2020 09:43:52 +0000</lastBuildDate>
    
	<atom:link href="https://blog.tux-sudo.com/categories/ops/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Easy SSL Termination - CORS Edition</title>
      <link>https://blog.tux-sudo.com/posts/caddy-reverse-proxy-ssl-cors/</link>
      <pubDate>Tue, 05 May 2020 09:43:52 +0000</pubDate>
      
      <guid>https://blog.tux-sudo.com/posts/caddy-reverse-proxy-ssl-cors/</guid>
      <description>I&#39;ve always been a big fan of Caddy, and it just got a 2.0 release! In the meantime, I have developed another throwaway service called Archy, and naturally, it deserves the best Ops can offer.
So, here&#39;s the scenario. I need a simple HTTPS service exposed to the world. I have a VPS with a public IP. Ofcourse, I&#39;ll celebrate Caddy&#39;s 2nd birth and write a simple Caddyfile.
archy.tux-sudo.com reverse_proxy /* 127.</description>
    </item>
    
    <item>
      <title>Go: Useful Development Workflows</title>
      <link>https://blog.tux-sudo.com/posts/golang-github-actions/</link>
      <pubDate>Mon, 23 Dec 2019 05:32:57 +0000</pubDate>
      
      <guid>https://blog.tux-sudo.com/posts/golang-github-actions/</guid>
      <description>Code Coverage, Static Code Analysis, Tests, Releases? What else? Probably a few more things, but you get the point. These are all things that are expected to be part of a modern day development workflow. While this is becoming the norm in companies, a lot of pet open-source projects still skimp on these things. And frankly, I did too. I wasn&#39;t going to bother hosting my own Jenkins behemoth just so my soon-to-be abandoned project could run a few builds.</description>
    </item>
    
    <item>
      <title>ARM Your Golang Containers</title>
      <link>https://blog.tux-sudo.com/posts/armyourcontainers/</link>
      <pubDate>Mon, 19 Mar 2018 11:52:57 +0530</pubDate>
      
      <guid>https://blog.tux-sudo.com/posts/armyourcontainers/</guid>
      <description>&lt;p&gt;So then, here is the deal. I write tiny microservices that may or may not serve any purpose. Despite how meaningless they might be, I give them the perfect operations treatment.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Caddy! Team 443 FTW</title>
      <link>https://blog.tux-sudo.com/posts/caddy-autohttps/</link>
      <pubDate>Mon, 19 Feb 2018 11:01:54 +0530</pubDate>
      
      <guid>https://blog.tux-sudo.com/posts/caddy-autohttps/</guid>
      <description>This one is a gamechanger. It really is.
On a recent Golang obsessed Github browsing spree, I read the following project description: &amp;ldquo;Fast, cross-platform HTTP/2 web server with automatic HTTPS&amp;rdquo;. I&#39;ve read that before, and more often than not ended up disappointing myself and resorting to hacks like [this] (https://blog.tux-sudo.com/posts/letsencrypt-nginx-docker/) to create an automatic TLS system for my websites. There are other ways, but almost all of them were semi-automatic in the long run (yay cron!</description>
    </item>
    
    <item>
      <title>LetsEncrypt Certificates for Dockerized Nginx</title>
      <link>https://blog.tux-sudo.com/posts/letsencrypt-nginx-docker/</link>
      <pubDate>Tue, 26 Sep 2017 16:25:49 +0530</pubDate>
      
      <guid>https://blog.tux-sudo.com/posts/letsencrypt-nginx-docker/</guid>
      <description>I like nginx. I like docker. I like SSL. I also like not paying for SSL certificates.If you, like me are operating a small time website, you probably don&#39;t want to dish out a few hundred dollars for an SSL certificate.Thankfully, LetsEncrypt provides free ssl certificates and is now trusted by most major browsers.However, integrating certbot to automatically configure my nginx inside a docker container has been a pain. In the past, I generated the standalone cert with &amp;ndash;cert-only and then linked my docker container to use it but this was a far from usable solution given the horrid automation code I had to write.</description>
    </item>
    
  </channel>
</rss>