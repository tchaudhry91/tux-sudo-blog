<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Development on Tux-Sudo</title>
    <link>https://blog.tux-sudo.com/categories/development/</link>
    <description>Recent content in Development on Tux-Sudo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 05 May 2020 09:43:52 +0000</lastBuildDate>
    
	<atom:link href="https://blog.tux-sudo.com/categories/development/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Easy SSL Termination - CORS Edition</title>
      <link>https://blog.tux-sudo.com/posts/caddy-reverse-proxy-ssl-cors/</link>
      <pubDate>Tue, 05 May 2020 09:43:52 +0000</pubDate>
      
      <guid>https://blog.tux-sudo.com/posts/caddy-reverse-proxy-ssl-cors/</guid>
      <description>I&#39;ve always been a big fan of Caddy, and it just got a 2.0 release! In the meantime, I have developed another throwaway service called Archy, and naturally, it deserves the best Ops can offer.
So, here&#39;s the scenario. I need a simple HTTPS service exposed to the world. I have a VPS with a public IP. Ofcourse, I&#39;ll celebrate Caddy&#39;s 2nd birth and write a simple Caddyfile.
archy.tux-sudo.com reverse_proxy /* 127.</description>
    </item>
    
    <item>
      <title>Go: Useful Development Workflows</title>
      <link>https://blog.tux-sudo.com/posts/golang-github-actions/</link>
      <pubDate>Mon, 23 Dec 2019 05:32:57 +0000</pubDate>
      
      <guid>https://blog.tux-sudo.com/posts/golang-github-actions/</guid>
      <description>Code Coverage, Static Code Analysis, Tests, Releases? What else? Probably a few more things, but you get the point. These are all things that are expected to be part of a modern day development workflow. While this is becoming the norm in companies, a lot of pet open-source projects still skimp on these things. And frankly, I did too. I wasn&#39;t going to bother hosting my own Jenkins behemoth just so my soon-to-be abandoned project could run a few builds.</description>
    </item>
    
    <item>
      <title>Go: Spin-Up Databases for CI Testing</title>
      <link>https://blog.tux-sudo.com/posts/ci-docker-dbs/</link>
      <pubDate>Fri, 20 Sep 2019 06:19:22 +0000</pubDate>
      
      <guid>https://blog.tux-sudo.com/posts/ci-docker-dbs/</guid>
      <description>One thing has always bothered me while writing tests is the lack of a real datasource to run tests against. Most projects I&#39;ve worked with in the past have either mocked responses from a datastore or used a &amp;ldquo;common&amp;rdquo; datastore to perform tests against. While mocks are good for quick unit tests, I still prefer using a &amp;ldquo;real&amp;rdquo; datasource, especially for integration tests.
While taking Bill Kennedy&#39;s Ultimate Go training a while ago, I saw Bill recommend a testing approach which involved &amp;ldquo;spinning up&amp;rdquo; a database container right from within your test code, run your tests, and clean-up.</description>
    </item>
    
  </channel>
</rss>