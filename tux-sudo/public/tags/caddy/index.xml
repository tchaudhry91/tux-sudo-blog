<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Caddy on Tux-Sudo</title>
    <link>https://blog.tux-sudo.com/tags/caddy/</link>
    <description>Recent content in Caddy on Tux-Sudo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 19 Feb 2018 11:01:54 +0530</lastBuildDate>
    
	<atom:link href="https://blog.tux-sudo.com/tags/caddy/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Caddy! Team 443 FTW</title>
      <link>https://blog.tux-sudo.com/posts/caddy-autohttps/</link>
      <pubDate>Mon, 19 Feb 2018 11:01:54 +0530</pubDate>
      
      <guid>https://blog.tux-sudo.com/posts/caddy-autohttps/</guid>
      <description>This one is a gamechanger. It really is.
On a recent Golang obsessed Github browsing spree, I read the following project description: &amp;ldquo;Fast, cross-platform HTTP/2 web server with automatic HTTPS&amp;rdquo;. I&amp;rsquo;ve read that before, and more often than not ended up disappointing myself and resorting to hacks like this to create an automatic TLS system for my websites. There are other ways, but almost all of them were semi-automatic in the long run (yay cron!</description>
    </item>
    
  </channel>
</rss>