<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>go on Tux-Sudo</title>
    <link>https://blog.tux-sudo.com/tags/go/</link>
    <description>Recent content in go on Tux-Sudo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 04 Jul 2020 15:30:44 +0530</lastBuildDate>
    
	<atom:link href="https://blog.tux-sudo.com/tags/go/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Production Grade Web Service with Go - Transports</title>
      <link>https://blog.tux-sudo.com/posts/production-grade-svc-3/</link>
      <pubDate>Sat, 04 Jul 2020 15:30:44 +0530</pubDate>
      
      <guid>https://blog.tux-sudo.com/posts/production-grade-svc-3/</guid>
      <description>Note : This is part two of a series of posts describing how to write &amp;ldquo;Production Grade Webservice in Go&amp;rdquo;. Here&amp;rsquo;s Part - 1, The Service  and Part - 2 The Store  if you haven&amp;rsquo;t read those.
We&amp;rsquo;ve reached a point where we have properly laid out the business logic and the storage implementation for our service. Now, we&amp;rsquo;re going to move on and talk about transports. As the name suggests, a transport is essentially transporting data over the network in a pre-defined format.</description>
    </item>
    
    <item>
      <title>Production Grade Web Services with Go - The Store</title>
      <link>https://blog.tux-sudo.com/posts/production-grade-svc-2/</link>
      <pubDate>Mon, 08 Jun 2020 12:16:15 +0530</pubDate>
      
      <guid>https://blog.tux-sudo.com/posts/production-grade-svc-2/</guid>
      <description>Note : This is part two of a series of posts describing how to write &amp;ldquo;Production Grade Webservice in Go&amp;rdquo;. Here&amp;rsquo;s Part - 1, The Service  if you haven&amp;rsquo;t read it.
The previous post ended with a defined structured for our service and some basic testing. It was, however, lacking what is a very important component for most webservices, a datastore. If you&amp;rsquo;ve used frameworks to write services in the past, you&amp;rsquo;re probably familiar with abstractions like Hibernate/DjangoORM etc.</description>
    </item>
    
    <item>
      <title>Production Grade Web Services with Go - The Service</title>
      <link>https://blog.tux-sudo.com/posts/production-grade-svc-1/</link>
      <pubDate>Sun, 07 Jun 2020 09:33:15 +0000</pubDate>
      
      <guid>https://blog.tux-sudo.com/posts/production-grade-svc-1/</guid>
      <description>Production Grade is a term thrown around a lot these days. Every organization seems to have it&amp;rsquo;s own definition for what qualifies as &amp;ldquo;Production Grade&amp;rdquo; or &amp;ldquo;Production Ready&amp;rdquo;. In these series of posts, I&amp;rsquo;m going to present my take on the topic and the bare minimum of what I think qualifies under this definition. These posts assume a working knowledge of Go and are not meant for total beginners to the language.</description>
    </item>
    
    <item>
      <title>Azure SDK Go</title>
      <link>https://blog.tux-sudo.com/posts/azure-sdk-go/</link>
      <pubDate>Mon, 18 May 2020 11:06:04 +0000</pubDate>
      
      <guid>https://blog.tux-sudo.com/posts/azure-sdk-go/</guid>
      <description>So, I&amp;rsquo;ve recently had to work with the Azure-SDK for a few small tasks. I&amp;rsquo;ve worked with AWS and GCP SDKs before, and while they have their problems it wasn&amp;rsquo;t too hard to figure them out. Azure wasn&amp;rsquo;t quite the same.
Now, I am new to Azure, but I did not expect to spend 30 minutes to get a simple VM listing to work. The Authentication docs seemed fairly straight forward.</description>
    </item>
    
    <item>
      <title>Go: Useful Development Workflows</title>
      <link>https://blog.tux-sudo.com/posts/golang-github-actions/</link>
      <pubDate>Mon, 23 Dec 2019 05:32:57 +0000</pubDate>
      
      <guid>https://blog.tux-sudo.com/posts/golang-github-actions/</guid>
      <description>Code Coverage, Static Code Analysis, Tests, Releases? What else? Probably a few more things, but you get the point. These are all things that are expected to be part of a modern day development workflow. While this is becoming the norm in companies, a lot of pet open-source projects still skimp on these things. And frankly, I did too. I wasn&amp;rsquo;t going to bother hosting my own Jenkins behemoth just so my soon-to-be abandoned project could run a few builds.</description>
    </item>
    
    <item>
      <title>Go: Spin-Up Databases for CI Testing</title>
      <link>https://blog.tux-sudo.com/posts/ci-docker-dbs/</link>
      <pubDate>Fri, 20 Sep 2019 06:19:22 +0000</pubDate>
      
      <guid>https://blog.tux-sudo.com/posts/ci-docker-dbs/</guid>
      <description>One thing has always bothered me while writing tests is the lack of a real datasource to run tests against. Most projects I&amp;rsquo;ve worked with in the past have either mocked responses from a datastore or used a &amp;ldquo;common&amp;rdquo; datastore to perform tests against. While mocks are good for quick unit tests, I still prefer using a &amp;ldquo;real&amp;rdquo; datasource, especially for integration tests.
While taking Bill Kennedy&amp;rsquo;s Ultimate Go training a while ago, I saw Bill recommend a testing approach which involved &amp;ldquo;spinning up&amp;rdquo; a database container right from within your test code, run your tests, and clean-up.</description>
    </item>
    
  </channel>
</rss>